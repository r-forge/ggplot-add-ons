library(brew)
?brew
#
brew(system.file("featurefull.brew",package="brew"),envir=new.env())
?par
pdf()
par(bg="transparent")
system("open Rplot.pdf")
system("open Rplots.pdf")
png()
dev.off()
system("open *.png")
par(bg=NA)
#
cars <- c(1, 3, 6, 4, 9)#
trucks <- c(2, 5, 4, 5, 12)#
year <- c(2004, 2005, 2006, 2007, 2008)#
df2<-data.frame(cars,trucks,year)#
xyplot(cars+trucks~year, data=df2, type="o")
qplot(year,)
d<- melt(df2,id="year")
qplot(year,value,melt(df2,id="year"),colour=variable)
qplot(year,value,data=melt(df2,id="year"),colour=variable)
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point"))
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point")) + geom_text()
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point")) + geom_text(aes(label=value))
d <- melt(df2,id="year")#
qplot(year,value,data=d,colour=variable,geom=c("line","point")) + #
geom_text(data= subset(d, variable == "cars"),aes(label=value))
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,...){#
	panel.xyplot(x,y,...)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,...);print(subscripts)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);print(subscripts)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
df2
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts < 5)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts < 5){#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts <= 5){#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);#
	grid.text(unit(df2$year,"native"),unit(df2$cars,"native"),label=df2$cars, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...)#
	grid.text(unit(df2$year,"native"),unit(df2$cars,"native"),label=df2$cars, just="top")}#
  )
?panel.superpose
integrate
plot(1,1)
#
p1 <- runif(1000) #
qp1 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="A",xlab="",ylab="")#
qp2 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="B",xlab="",ylab="")#
qp3 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="C",xlab="",ylab="")#
qp4 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="D",xlab="",ylab="")#
#
trellis.par.set(list(layout.heights = list(top.padding =#
0,main.key.padding=0,key.axis.padding=0,#
                                         axis.xlab.padding=0,#
xlab.key.padding=0,key.sub.padding=0,bottom.padding=0),#
                    layout.widths =#
list(left.padding=0,key.ylab.padding=0,ylab.axis.padding=0,axis.key.padding=0,right.padding=0)))#
plot(qp1, split = c(1, 1, 2, 2), more = TRUE)#
plot(qp2, split = c(1, 2, 2, 2), more = TRUE)#
plot(qp3, split = c(2, 1, 2, 2), more = TRUE)#
plot(qp4, split = c(2, 2, 2, 2), more = FALSE)
units
units()
?units
?unit
unit(12,"pint",12)
valid.units
Grid:::valid.units
unit
valid.unit
?valid.unit
Grid::valid.unit
Grid:valid.unit
getAnywhere(valid.unit)
getAnywhere(valid.units)
x <- seq(1000,5000,by=100)
x
y <- c(1200, 2000, 3000)
match(x,y)
match(x,y[1])
xx <- sample(x,100)
xx <- sample(x,100,replace=T)
xx
match(xx,y[1])
length(match(xx,y[1]))
sum(match(xx,y[1]))
?match
!is.na(match(xx,y[1]))
sum(!is.na(match(xx,y[1])))
sapply(y, function(.v) sum(!is.na(match(xx,.v))))
xx[xx==3000]
    source("http://bioconductor.org/biocLite.R")#
    biocLite("weaver")
ls(package:ggplot2)
floor_time
round_any
?floor_time
?abind
library(spectroR)
library(baptMisc)
?findMinima
?findZeros
findZeros
#
        x <- seq(1, 15, length=100)#
        y <- jitter(sin(x), a=0.2)#
#
        plot(x, y)#
        #
        findZero(x, y) #
        #
        spl <- smooth.spline(x, y)#
        findZero(spl=spl, int=range(x)) #
        #
        zeros <- findZeros(x, y, c(6, 10))#
        abline(v=zeros, col="red")#
        abline(h=0, col="grey90")
zeros
?polyroot
polynom(c(1,1))
?poly
poly(1:10, 3)
polynomial
?root
?uniroot
library(spectra)
plot(1:1)
install.packages(c("ggplot2", "plyr"))
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.5))
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.5),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.7),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.2),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.8),pch=19)
 sunflowerplot(f)
#
shadowtext <- function(x, y=NULL, labels, col='white', bg='black',#
	theta= seq(pi/4, 2*pi, length.out=8), r=0.1, ... ) {#
	#
	xy <- xy.coords(x,y)#
	xo <- r*strwidth('A')#
	yo <- r*strheight('A')#
#
	for (i in theta) {#
		text( xy$x + cos(i)*xo, xy$y + sin(i)*yo, labels, col=bg, ... )#
	}#
	text(xy$x, xy$y, labels, col=col, ... )#
}#
#
And here is an example of use:#
#
plot(1:10, 1:10, bg='aliceblue')#
rect(3,3,5,8, col='navy')#
text(5,6, 'Test 1', col='lightsteelblue')#
shadowtext(5,4, 'Test 2', col='lightsteelblue')
sprintf("4.f",2)
sprintf("%4.d",2)
sprintf("%4.s",2)
sprintf("%4.e",2)
sprintf("%4.f",2)
?sprintf
sprintf("%4.f0",2)
sprintf("%04.f",2)
sprintf("%04.f",1000)
sapply(sample(1:1000,4), function(ii) sprintf("%04.f",ii))
install.packages("hwriter")
#
library(hwriter)#
lcss = 'http://www.ebi.ac.uk/~gpau/hwriter/hwriter.css'#
lj = 'http://www.kryogenix.org/code/browser/sorttable/sorttable.js'#
p = openPage('test.html', link.css=lcss, link.javascript=lj)#
hwrite(iris, p, table.class='sortable', row.bgcolor='#
closePage(p)#
browseURL('test.html')
#
library(hwriter)#
lcss = 'http://www.ebi.ac.uk/~gpau/hwriter/hwriter.css'#
lj = 'http://www.kryogenix.org/code/browser/sorttable/sorttable.js'#
p = openPage('test.html', link.css=lcss, link.javascript=lj)#
hwrite(iris, p, table.class='sortable', row.bgcolor=')#
closePage(p)#
browseURL('test.html')
lcss
hwrite(iris, p, table.class='sortable', row.bgcolor='
closePage(p)
browseURL('test.html')
expr <- "3*5"
eval(expr)
eval(deparse(expr))
eval(noquote(expr))
noquote(expr)
as.call(expr)
eval(eval(noquote(expr)))
call(expr)
as.call(noquote(expr))
as.call(list(expr))
?call
eval(as.expression(expr))
as.expression(expr)
as.expression(noquote(expr))
#
system("wget http://dl.getdropbox.com/u/1047321/x.csv")#
x = read.csv("x.csv")#
#
ggplot(x) + geom_path(aes(x=x,y=y), arrow=arrow())#
ggplot(x) + geom_path(aes(x=x,y=y), arrow=arrow(length=unit(3,"inch")))#
#
#
per step#
ggplot(x) + geom_path(aes(x=x,y=y, colour=X), arrow=arrow())#
#
#
#
grouping so split the path in its sub units. But of course, splitting#
it in units of one point does not work:#
ggplot(x) + geom_path(aes(x=x,y=y, group=X), arrow=arrow())#
#
each group#
y = x[-1,]#
y$X = y$X-1#
x = rbind(x,y)#
ggplot(x) + geom_path(aes(x=x,y=y, group=X), arrow=arrow())
d <- read.table(pipe("pbpaste"), head=T)
ddply(d,)
ddply(d,.(Firm),count)
ddply(d,.(Firm),add)
ddply(d,.(Firm),`+`)
ddply(d,.(Firm),summary)
ddply(d,.(Firm))
ddply(d,.(Firm),sum)
aggregate(d$Banks,d$Firm)
#
ddply(d, .(Firm), transform, count = nrow)
#
ddply(d, .(Firm), transform, count = length)
#
ddply(d, .(Banks), transform, count = length)
#
ddply(d, .(Firm, Banks), transform, count = length)
#
ddply(table(d), .(Firm), transform, count = length)
table(d)
#
cast(table(d), Firm~.)
#
cast(table(d), .~Firm)
str(table(d))
#
cast(as.data.frame(table(d)), .~Firm)
#
cast(as.data.frame(table(d)), .~Firm, fun=sum)
#
myplot(tmp, tcl = -0.1)
#
myplot(tmp, tcl=-0.1)
plot.formula
getS4Methods("plot")
getMethods("plot")
getMethod("plot")
getS3Method("plot")
Methods("plot")
plot
?plot
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot.formula(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 0.1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = -0.1)
plot(Y ~ X, data = tmp, tcl = -0.1)
plot(Y ~ X, data = tmp, tcl = -1)
#
legend(80,1150, c("Simulation", "Observation", lty=1:2, col=2:3)
#
legend(1,1, c("Simulation", "Observation", lty=1:2, col=2:3)
#
legend(1,4, c("Simulation", "Observation", lty=1:2, col=2:3)
#
legend(1,4, c("Simulation", "Observation"), lty=1:2, col=2:3)
install.packages( "RSiteSearch")
library( "RSiteSearch")
? "RSiteSearch"
RSiteSearch
help(package:RSiteSearch)
help(package=RSiteSearch)
?RSiteSearch.function
#
  z <- RSiteSearch.function("spline", maxPages = 2)#
  str(z)
z
#
#
myData <- read.table(textConnection("treat raw group beta lower upper#
A 0.00176 High 1.09 -0.47 2.64#
A 0.00176 Low -2.70 -4.70 -0.70#
B 0.000636 High  0.70 -0.18 1.59#
B 0.000636 Low -1.67 -2.72 -0.63#
C 0.000501 High -1.42 -2.6 -0.24#
C 0.000501 Low 2.09 0.46 3.73#
D 0.000801 High -1.11 -2.29 0.05#
D 0.000801 Low 2.27 0.64 3.92#
E 0.000419 High -1.05 -2.24 0.12#
E 0.000419 Low 2.54 0.89 4.19#
"),header=TRUE)#
closeAllConnections()#
#
myData$lograw <- log10(myData$raw)#
p <- ggplot(myData,aes(x=lograw,y=beta,colour=group,min=lower,max=upper))#
p <- p + geom_pointrange(size=.7)#
p  <- p + scale_x_continuous(breaks=myData$lograw) + coord_flip()
#
#
myData <- read.table(textConnection("treat raw group beta lower upper#
A 0.00176 High 1.09 -0.47 2.64#
A 0.00176 Low -2.70 -4.70 -0.70#
B 0.000636 High  0.70 -0.18 1.59#
B 0.000636 Low -1.67 -2.72 -0.63#
C 0.000501 High -1.42 -2.6 -0.24#
C 0.000501 Low 2.09 0.46 3.73#
D 0.000801 High -1.11 -2.29 0.05#
D 0.000801 Low 2.27 0.64 3.92#
E 0.000419 High -1.05 -2.24 0.12#
E 0.000419 Low 2.54 0.89 4.19#
"),header=TRUE)#
closeAllConnections()#
#
myData$lograw <- log10(myData$raw)#
p <- ggplot(myData,aes(x=lograw,y=beta,colour=group,min=lower,max=upper))#
p <- p + geom_pointrange(size=.7)#
p  <- p + scale_x_continuous(breaks=myData$lograw) + coord_flip()+theme_bw()
p
sqrt(21.5^2+14.5^2)
c(11.4,7.2,7.5,1.79.4)*2.2
c(11.4,7.2,7.5,1.7,9.4)*2.2
plot(1)
locator(1)
?legend
library(ggplot2)#
x <- seq(1992, 2002, by=2)#
#
d1 <- data.frame(x=x, y=rnorm(length(x)))#
xy <- expand.grid(x=x, y=x)#
d2 <- data.frame(x=xy$x, y=xy$y, z= jitter(xy$x + xy$y))#
#
d1$panel <- "a"#
d2$panel <- "b"#
d1$z <- d1$x#
#
d <- rbind(d1, d2)#
#
p <- ggplot(data = d, mapping = aes(x = x, y = y))#
p <- p + facet_grid(panel~., scale="free")#
p <- p + layer(data= d1,  geom = c( "line"), stat = "identity")#
p <- p + layer(data=d2, mapping=aes(colour=z, fill=z),  geom =#
c("tile"), stat = "identity")#
p
#
        dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
        d <- ggplot(dsmall, aes(carat, price))#
        str(dsmall)#
        library(ggplotpp)#
#
        d + geom_ngon(aes(fill = carat, sides=color), colour="orange",ar=1,  size=5, angle=pi/3)#
#
        d + geom_ngon(aes(colour = carat, angle = x, ar=y),fill=NA,  sides=50)#
        #
        d + geom_ngon(aes(colour = carat, fill = x, size=y), linewidth=2,  sides=6)
 d + geom_ngon(aes(colour = carat, angle = x, ar=y),fill=NA,  sides=50)
 d + geom_ngon(aes(fill = carat, sides=color), colour="orange",ar=1,  size=5, angle=pi/3)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_ngon(aes(ar=table), size=2,  sides=50)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_star(aes(ar=table), size=2,  sides=50)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_star(aes(ar=table), size=2,  sides=5)
checkOneSymbol <- function(pch=0){#
   gTree(children=gList(#
       rectGrob(0.5, 0.5, width=unit(10, "mm"), height=unit(10,  #
"mm"),#
               gp=gpar(lty=2, fill=NA, col=alpha("black", 0.5))),#
   pointsGrob(0.5, 0.5, size=unit(10, "mm"),pch=pch,#
       gp=gpar(col=alpha("red", 0.5)))#
   ))#
#
}#
all.symbols <- lapply(0:23, checkOneSymbol)#
#
pdf("symbols.pdf", height=1.2/2.54, width=24.2/2.54)#
#
vp <- viewport(width=0.5, height=0.5, name="main")#
pushViewport(vp)#
#
pushViewport(viewport(layout=grid.layout(1, 24,#
                       widths=unit(10, "mm"),#
                       heights=unit(10, "mm"),#
                       just="center")))#
#
for(ii in 0:23){#
pushViewport(viewport(layout.pos.col=ii+1, layout.pos.row=1))#
grid.draw(all.symbols[[ii+1]])#
upViewport(1)#
}#
dev.off()
system("open symbols.pdf")
    #
	library(ggplotpp)#
	xy <- expand.grid(x=-10:10, y=-10:10)#
	d1 <- data.frame(x=xy$x, y=xy$y)#
	d1$colour <- sample(1:5, length(xy$x), repl=T) #
	#
	d1$angle <- 2*pi*rnorm(d1$x) #
	d1$whatever <- rnorm(d1$x) #
	d1$length <- abs(rnorm(d1$y))/10 #
	#
	#
	p <- ggplot(data=d1, map=aes(x=x, y=y, angle=angle, length=length, colour=colour))#
	#
	p2 <- #
	p + geom_field() + geom_point()#
	p + geom_field(aes(size=whatever))
geom_field
geom_ellipse
#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	d <- ggplot(dsmall, aes(carat, price))#
	str(dsmall)#
	library(ggplotpp)
?ggplotpp
library(ggplotpp)
ls(package:ggplotpp)
install.packages("ggplotpp", repos="http://R-Forge.R-project.org")
#
	library(ggplotpp)#
	xy <- expand.grid(x=-10:10, y=-10:10)#
	d1 <- data.frame(x=xy$x, y=xy$y)#
#
	d1$u <- rnorm(d1$x) / 10#
	d1$whatever <- rnorm(d1$x) #
	d1$v <- abs(rnorm(d1$y))/10#
	#
	#
	p <- ggplot(data=d1, map=aes(x=x, y=y, abscissa=u, ordinate=v))#
	#
	p + geom_fielduv(aes(colour=whatever)) + geom_point()
library(spatstat)
pointsOnLines
? pointsOnLines
#
  X <- psp(runif(20), runif(20), runif(20), runif(20),  window=owin())#
  Y <- pointsOnLines(X, eps=0.05)#
  plot(X, main="")#
  plot(Y, add=TRUE, pch="+")
sample
#
	ages <- cut(seq(1, 100), breaks=seq(10, 100, 10))#
	d <- data.frame(ages=ages, names=sample(letters,100,  repl=T))
#
	ages <- cut(seq(1, 100), breaks=seq(0, 100, 10))#
	d <- data.frame(ages=ages, names=sample(letters,100,  repl=T))
#
	head(d)
#
	cast(d, ages~.)
#
	cast(d, ages~names)
#
	cast(d, .~names)
#
	cast(d, .~ages)
#
	cast(d, ...~ages)
#
	cast(d, ages~...)
cast
?cast
	#
	cast(d, ...~ages)
d
#
	reshape(d, ages)
#
	reshape(d, ages, direction="wide")
?reshape
#
	reshape(d, direction="wide")
#
	reshape(d, direction="wide", v.names=ages)
#
	reshape(d, direction="wide", v.names="ages")
#
	reshape(d, direction="wide", v.names=names)
#
	reshape(d, direction="wide", timevar=ages, v.names=names)
#
	reshape(d, direction="wide", timevar=names, v.names=ages)
#
	reshape(d, direction="wide", timevar="names", v.names="ages")
names
#
	d <- data.frame(ages=ages, name=sample(letters,100,  repl=T))#
	head(d)#
	reshape(d, direction="wide", timevar=name, v.names=ages)
#
	reshape(d, direction="long", timevar=name, v.names=ages)
#
	cast(d, ages ~name)
#
	cast(d, ages ~., value=name)
#
	cast(d, ages ~., value="name")
#
	cast(d, . ~ages, value="name")
#
	cast(d, ... ~ages, value="name")
setwd('/Users/baptiste/Documents/R/photonics/ggplot-add-ons/pkg/R')
#
	cast(d, ... ~ages)
#
fish_ByMuestreo <- structure(list(data = structure(list(SampleDate = structure(c(3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L, 14L, 14L,#
14L, 14L, 14L, 14L, 5L, 5L, 5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L,#
15L, 15L, 15L, 28L, 28L, 28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L,#
22L, 22L, 22L, 22L, 25L, 25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L,#
31L, 31L, 31L, 31L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 14L, 14L, 14L, 14L, 14L, 14L, 5L, 5L,#
5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L, 15L, 15L, 15L, 28L, 28L,#
28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L, 22L, 22L, 22L, 22L, 25L,#
25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L, 31L, 31L, 31L, 31L, 34L,#
34L, 34L, 34L, 34L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 6L,#
6L, 6L, 6L, 6L, 6L, 9L, 9L, 9L, 12L, 12L, 12L, 21L, 21L, 21L,#
21L, 29L, 29L, 29L, 19L, 19L, 19L, 19L, 19L, 23L, 23L, 23L, 23L,#
23L, 26L, 26L, 26L, 26L, 41L, 41L, 41L, 41L, 32L, 32L, 32L, 32L,#
32L, 35L, 35L, 35L, 35L, 38L, 38L, 38L, 38L, 38L, 2L, 2L, 2L,#
2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L,#
7L, 7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L,#
27L, 27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L,#
24L, 24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L,#
33L, 33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L,#
3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L,#
7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L,#
27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L,#
24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L,#
33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L), .Label = c("10/2/2002",#
"10/4/2002", "6/23/2002", "6/30/2002", "7/10/2002", "7/12/2002",#
"7/14/2002", "7/17/2002", "7/19/2002", "7/21/2002", "7/24/2002",#
"7/26/2002", "7/28/2002", "7/3/2002", "7/31/2002", "7/7/2002",#
"8/11/2002", "8/14/2002", "8/16/2002", "8/18/2002", "8/2/2002",#
"8/21/2002", "8/23/2002", "8/25/2002", "8/28/2002", "8/30/2002",#
"8/4/2002", "8/7/2002", "8/9/2002", "9/1/2002", "9/11/2002",#
"9/13/2002", "9/15/2002", "9/18/2002", "9/20/2002", "9/22/2002",#
"9/25/2002", "9/27/2002", "9/29/2002", "9/4/2002", "9/6/2002",#
"9/8/2002"), class = "factor"), PondName = structure(c(1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L), .Label = c("Pond01",#
"Pond02", "Pond03", "Pond04", "Pond05", "Pond06", "Pond07"), class = "factor"),#
   Muestreo = c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L,#
   3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L,#
   7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L,#
   10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L,#
   13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L,#
   15L, 15L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 13L, 13L, 13L, 13L, 14L, 14L, 14L,#
   14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L,#
   13L, 13L, 14L, 14L, 14L, 14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L,#
   2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L,#
   6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L,#
   9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L,#
   12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 1L,#
   1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L,#
   5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L,#
   8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L,#
   11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L,#
   14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L), BodyWeight.g. = c(1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 17, 15.5,#
   18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,#
   2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9,#
   8, 9, 11, 11, 10, 11, 10, 12, 10.5, 12, 14, 14, 13, 13.5,#
   17, 16, 14, 15, 14, 17, 16, 17, 15.5, 18, 18, 18, 17, 18,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1,#
   1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8,#
   7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12, 11, 10, 12, 10.5,#
   14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17, 16, 17, 15.5, 1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25,#
   22), Length.mm. = c(2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 14L, 15L, 16L, 16L, 15L,#
   16L, 17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 11L, 12L,#
   11L, 12L, 10L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 2L, 2L, 3L,#
   2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L,#
   5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L,#
   9L, 10L, 11L, 10L, 10L, 11L, 12L, 11L, 12L, 12L, 13L, 14L,#
   12L, 13L, 14L, 15L, 16L, 15L, 14L, 15L, 16L, 16L, 15L, 16L,#
   17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L)), .Names = c("SampleDate", "PondName", "Muestreo",#
"BodyWeight.g.", "Length.mm."), class = "data.frame", row.names = c("1",#
"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",#
"14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24",#
"25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35",#
"36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46",#
"47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57",#
"58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68",#
"69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79",#
"80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90",#
"91", "92", "93", "94", "95", "96", "97", "98", "99", "100",#
"101", "102", "103", "104", "105", "106", "107", "108", "109",#
"110", "111", "112", "113", "114", "115", "116", "117", "118",#
"119", "120", "121", "122", "123", "124", "125", "126", "127",#
"128", "129", "130", "131", "132", "133", "134", "135", "136",#
"137", "138", "139", "140", "141", "142", "143", "144", "145",#
"146", "147", "148", "149", "150", "151", "152", "153", "154",#
"155", "156", "157", "158", "159", "160", "161", "162", "163",#
"164", "165", "166", "167", "168", "169", "170", "171", "172",#
"173", "174", "175", "176", "177", "178", "179", "180", "181",#
"182", "183", "184", "185", "186", "187", "188", "189", "190",#
"191", "192", "193", "194", "195", "196", "197", "198", "199",#
"200", "201", "202", "203", "204", "205", "206", "207", "208",#
"209", "210", "211", "212", "213", "214", "215", "216", "217",#
"218", "219", "220", "221", "222", "223", "224", "225", "226",#
"227", "228", "229", "230", "231", "232", "233", "234", "235",#
"236", "237", "238", "239", "240", "241", "242", "243", "244",#
"245", "246", "247", "248", "249", "250", "251", "252", "253",#
"254", "255", "256", "257", "258", "259", "260", "261", "262",#
"263", "264", "265", "266", "267", "268", "269", "270", "271",#
"272", "273", "274", "275", "276", "277", "278", "279", "280",#
"281", "282", "283", "284", "285", "286", "287", "288", "289",#
"290", "291", "292", "293", "294", "295", "296", "297", "298",#
"299", "300", "301", "302", "303", "304", "305", "306", "307",#
"308", "309", "310", "311", "312", "313", "314", "315", "316",#
"317", "318", "319", "320", "321", "322", "323", "324", "325",#
"326", "327", "328", "329", "330", "331", "332", "333", "334",#
"335", "336", "337", "338", "339", "340", "341", "342", "343",#
"344", "345", "346", "347", "348", "349", "350", "351", "352",#
"353", "354", "355", "356", "357", "358", "359", "360", "361",#
"362", "363", "364", "365", "366", "367", "368", "369", "370",#
"371", "372", "373", "374", "375", "376", "377", "378", "379",#
"380", "381", "382", "383", "384", "385", "386", "387", "388",#
"389", "390", "391", "392", "393", "394", "395", "396", "397",#
"398", "399", "400", "401", "402", "403", "404", "405", "406",#
"407", "408", "409", "410", "411", "412", "413", "414", "415",#
"416", "417", "418", "419", "420", "421", "422", "423", "424",#
"425", "426", "427", "428"))#
library(ggplot2)#
fishplot <-  qplot(PondName,BodyWeight.g.,data=fish_ByMuestreo,colour=Muestreo,position="jitter") +#
 stat_summary(aes(group=Muestreo),fun.data="mean_cl_normal",colour="green",geom="smooth",fill=NA) +#
opts(title="Average weight(grs) by Pond")#
print(fishplot)
#
fish_ByMuestreo <- structure(list(data = structure(list(SampleDate = structure(c(3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L, 14L, 14L,#
14L, 14L, 14L, 14L, 5L, 5L, 5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L,#
15L, 15L, 15L, 28L, 28L, 28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L,#
22L, 22L, 22L, 22L, 25L, 25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L,#
31L, 31L, 31L, 31L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 14L, 14L, 14L, 14L, 14L, 14L, 5L, 5L,#
5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L, 15L, 15L, 15L, 28L, 28L,#
28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L, 22L, 22L, 22L, 22L, 25L,#
25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L, 31L, 31L, 31L, 31L, 34L,#
34L, 34L, 34L, 34L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 6L,#
6L, 6L, 6L, 6L, 6L, 9L, 9L, 9L, 12L, 12L, 12L, 21L, 21L, 21L,#
21L, 29L, 29L, 29L, 19L, 19L, 19L, 19L, 19L, 23L, 23L, 23L, 23L,#
23L, 26L, 26L, 26L, 26L, 41L, 41L, 41L, 41L, 32L, 32L, 32L, 32L,#
32L, 35L, 35L, 35L, 35L, 38L, 38L, 38L, 38L, 38L, 2L, 2L, 2L,#
2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L,#
7L, 7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L,#
27L, 27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L,#
24L, 24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L,#
33L, 33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L,#
3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L,#
7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L,#
27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L,#
24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L,#
33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L), .Label = c("10/2/2002",#
"10/4/2002", "6/23/2002", "6/30/2002", "7/10/2002", "7/12/2002",#
"7/14/2002", "7/17/2002", "7/19/2002", "7/21/2002", "7/24/2002",#
"7/26/2002", "7/28/2002", "7/3/2002", "7/31/2002", "7/7/2002",#
"8/11/2002", "8/14/2002", "8/16/2002", "8/18/2002", "8/2/2002",#
"8/21/2002", "8/23/2002", "8/25/2002", "8/28/2002", "8/30/2002",#
"8/4/2002", "8/7/2002", "8/9/2002", "9/1/2002", "9/11/2002",#
"9/13/2002", "9/15/2002", "9/18/2002", "9/20/2002", "9/22/2002",#
"9/25/2002", "9/27/2002", "9/29/2002", "9/4/2002", "9/6/2002",#
"9/8/2002"), class = "factor"), PondName = structure(c(1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L), .Label = c("Pond01",#
"Pond02", "Pond03", "Pond04", "Pond05", "Pond06", "Pond07"), class = "factor"),#
   Muestreo = c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L,#
   3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L,#
   7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L,#
   10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L,#
   13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L,#
   15L, 15L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 13L, 13L, 13L, 13L, 14L, 14L, 14L,#
   14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L,#
   13L, 13L, 14L, 14L, 14L, 14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L,#
   2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L,#
   6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L,#
   9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L,#
   12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 1L,#
   1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L,#
   5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L,#
   8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L,#
   11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L,#
   14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L), BodyWeight.g. = c(1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 17, 15.5,#
   18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,#
   2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9,#
   8, 9, 11, 11, 10, 11, 10, 12, 10.5, 12, 14, 14, 13, 13.5,#
   17, 16, 14, 15, 14, 17, 16, 17, 15.5, 18, 18, 18, 17, 18,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1,#
   1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8,#
   7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12, 11, 10, 12, 10.5,#
   14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17, 16, 17, 15.5, 1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25,#
   22), Length.mm. = c(2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 14L, 15L, 16L, 16L, 15L,#
   16L, 17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 11L, 12L,#
   11L, 12L, 10L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 2L, 2L, 3L,#
   2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L,#
   5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L,#
   9L, 10L, 11L, 10L, 10L, 11L, 12L, 11L, 12L, 12L, 13L, 14L,#
   12L, 13L, 14L, 15L, 16L, 15L, 14L, 15L, 16L, 16L, 15L, 16L,#
   17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L)), .Names = c("SampleDate", "PondName", "Muestreo",#
"BodyWeight.g.", "Length.mm."), class = "data.frame", row.names = c("1",#
"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",#
"14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24",#
"25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35",#
"36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46",#
"47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57",#
"58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68",#
"69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79",#
"80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90",#
"91", "92", "93", "94", "95", "96", "97", "98", "99", "100",#
"101", "102", "103", "104", "105", "106", "107", "108", "109",#
"110", "111", "112", "113", "114", "115", "116", "117", "118",#
"119", "120", "121", "122", "123", "124", "125", "126", "127",#
"128", "129", "130", "131", "132", "133", "134", "135", "136",#
"137", "138", "139", "140", "141", "142", "143", "144", "145",#
"146", "147", "148", "149", "150", "151", "152", "153", "154",#
"155", "156", "157", "158", "159", "160", "161", "162", "163",#
"164", "165", "166", "167", "168", "169", "170", "171", "172",#
"173", "174", "175", "176", "177", "178", "179", "180", "181",#
"182", "183", "184", "185", "186", "187", "188", "189", "190",#
"191", "192", "193", "194", "195", "196", "197", "198", "199",#
"200", "201", "202", "203", "204", "205", "206", "207", "208",#
"209", "210", "211", "212", "213", "214", "215", "216", "217",#
"218", "219", "220", "221", "222", "223", "224", "225", "226",#
"227", "228", "229", "230", "231", "232", "233", "234", "235",#
"236", "237", "238", "239", "240", "241", "242", "243", "244",#
"245", "246", "247", "248", "249", "250", "251", "252", "253",#
"254", "255", "256", "257", "258", "259", "260", "261", "262",#
"263", "264", "265", "266", "267", "268", "269", "270", "271",#
"272", "273", "274", "275", "276", "277", "278", "279", "280",#
"281", "282", "283", "284", "285", "286", "287", "288", "289",#
"290", "291", "292", "293", "294", "295", "296", "297", "298",#
"299", "300", "301", "302", "303", "304", "305", "306", "307",#
"308", "309", "310", "311", "312", "313", "314", "315", "316",#
"317", "318", "319", "320", "321", "322", "323", "324", "325",#
"326", "327", "328", "329", "330", "331", "332", "333", "334",#
"335", "336", "337", "338", "339", "340", "341", "342", "343",#
"344", "345", "346", "347", "348", "349", "350", "351", "352",#
"353", "354", "355", "356", "357", "358", "359", "360", "361",#
"362", "363", "364", "365", "366", "367", "368", "369", "370",#
"371", "372", "373", "374", "375", "376", "377", "378", "379",#
"380", "381", "382", "383", "384", "385", "386", "387", "388",#
"389", "390", "391", "392", "393", "394", "395", "396", "397",#
"398", "399", "400", "401", "402", "403", "404", "405", "406",#
"407", "408", "409", "410", "411", "412", "413", "414", "415",#
"416", "417", "418", "419", "420", "421", "422", "423", "424",#
"425", "426", "427", "428")))#
library(ggplot2)#
fishplot <-  qplot(PondName,BodyWeight.g.,data=fish_ByMuestreo,colour=Muestreo,position="jitter") +#
 stat_summary(aes(group=Muestreo),fun.data="mean_cl_normal",colour="green",geom="smooth",fill=NA) +#
opts(title="Average weight(grs) by Pond")#
print(fishplot)
fish_ByMuestreo <- structure(list(data = structure(list(SampleDate = structure(c(3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L, 14L, 14L,#
14L, 14L, 14L, 14L, 5L, 5L, 5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L,#
15L, 15L, 15L, 28L, 28L, 28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L,#
22L, 22L, 22L, 22L, 25L, 25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L,#
31L, 31L, 31L, 31L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 3L,#
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L, 7L,#
10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L, 27L,#
17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L, 24L,#
30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L, 33L,#
36L, 36L, 36L, 36L, 36L, 14L, 14L, 14L, 14L, 14L, 14L, 5L, 5L,#
5L, 8L, 8L, 8L, 11L, 11L, 11L, 11L, 15L, 15L, 15L, 28L, 28L,#
28L, 28L, 28L, 18L, 18L, 18L, 18L, 18L, 22L, 22L, 22L, 22L, 25L,#
25L, 25L, 25L, 40L, 40L, 40L, 40L, 40L, 31L, 31L, 31L, 31L, 34L,#
34L, 34L, 34L, 34L, 37L, 37L, 37L, 37L, 1L, 1L, 1L, 1L, 1L, 6L,#
6L, 6L, 6L, 6L, 6L, 9L, 9L, 9L, 12L, 12L, 12L, 21L, 21L, 21L,#
21L, 29L, 29L, 29L, 19L, 19L, 19L, 19L, 19L, 23L, 23L, 23L, 23L,#
23L, 26L, 26L, 26L, 26L, 41L, 41L, 41L, 41L, 32L, 32L, 32L, 32L,#
32L, 35L, 35L, 35L, 35L, 38L, 38L, 38L, 38L, 38L, 2L, 2L, 2L,#
2L, 3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L,#
7L, 7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L,#
27L, 27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L,#
24L, 24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L,#
33L, 33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L,#
3L, 3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 16L, 16L, 16L, 7L, 7L, 7L,#
7L, 10L, 10L, 10L, 13L, 13L, 13L, 13L, 13L, 27L, 27L, 27L, 27L,#
27L, 17L, 17L, 17L, 17L, 20L, 20L, 20L, 20L, 24L, 24L, 24L, 24L,#
24L, 30L, 30L, 30L, 30L, 42L, 42L, 42L, 42L, 42L, 33L, 33L, 33L,#
33L, 36L, 36L, 36L, 36L, 36L, 39L, 39L, 39L, 39L, 39L, 39L), .Label = c("10/2/2002",#
"10/4/2002", "6/23/2002", "6/30/2002", "7/10/2002", "7/12/2002",#
"7/14/2002", "7/17/2002", "7/19/2002", "7/21/2002", "7/24/2002",#
"7/26/2002", "7/28/2002", "7/3/2002", "7/31/2002", "7/7/2002",#
"8/11/2002", "8/14/2002", "8/16/2002", "8/18/2002", "8/2/2002",#
"8/21/2002", "8/23/2002", "8/25/2002", "8/28/2002", "8/30/2002",#
"8/4/2002", "8/7/2002", "8/9/2002", "9/1/2002", "9/11/2002",#
"9/13/2002", "9/15/2002", "9/18/2002", "9/20/2002", "9/22/2002",#
"9/25/2002", "9/27/2002", "9/29/2002", "9/4/2002", "9/6/2002",#
"9/8/2002"), class = "factor"), PondName = structure(c(1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L,#
2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L,#
3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L,#
4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 4L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L, 5L,#
5L, 5L, 5L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L,#
6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L,#
7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L, 7L), .Label = c("Pond01",#
"Pond02", "Pond03", "Pond04", "Pond05", "Pond06", "Pond07"), class = "factor"),#
   Muestreo = c(1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L,#
   3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L,#
   7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L,#
   10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L,#
   13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L,#
   15L, 15L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 13L, 13L, 13L, 13L, 14L, 14L, 14L,#
   14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L,#
   4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L,#
   7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L,#
   10L, 11L, 11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L,#
   13L, 13L, 14L, 14L, 14L, 14L, 14L, 1L, 1L, 1L, 1L, 1L, 1L,#
   2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 6L, 6L,#
   6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L, 8L, 8L, 9L, 9L, 9L,#
   9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L, 11L, 11L, 12L, 12L,#
   12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L, 14L, 14L, 14L, 14L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L,#
   4L, 5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L,#
   8L, 8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L,#
   11L, 11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L,#
   14L, 14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L, 1L,#
   1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 3L, 3L, 3L, 4L, 4L, 4L, 4L,#
   5L, 5L, 5L, 6L, 6L, 6L, 6L, 6L, 7L, 7L, 7L, 7L, 7L, 8L, 8L,#
   8L, 8L, 9L, 9L, 9L, 9L, 10L, 10L, 10L, 10L, 10L, 11L, 11L,#
   11L, 11L, 12L, 12L, 12L, 12L, 12L, 13L, 13L, 13L, 13L, 14L,#
   14L, 14L, 14L, 14L, 15L, 15L, 15L, 15L, 15L, 15L), BodyWeight.g. = c(1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 17, 15.5,#
   18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,#
   2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9,#
   8, 9, 11, 11, 10, 11, 10, 12, 10.5, 12, 14, 14, 13, 13.5,#
   17, 16, 14, 15, 14, 17, 16, 17, 15.5, 18, 18, 18, 17, 18,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 1, 1, 1, 1, 1, 1, 1,#
   1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5, 7, 6, 7, 6, 7, 8,#
   7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12, 11, 10, 12, 10.5,#
   14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17, 16, 17, 15.5, 1,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5, 5,#
   7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10, 12,#
   11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14, 17,#
   16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25, 22,#
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4.5,#
   5, 7, 6, 7, 6, 7, 8, 7, 8, 7, 9, 8, 9, 8, 9, 11, 11, 10,#
   12, 11, 10, 12, 10.5, 14, 14, 13, 13.5, 17, 16, 14, 15, 14,#
   17, 16, 17, 15.5, 18, 18, 18, 17, 18, 19, 21, 21, 21, 25,#
   22), Length.mm. = c(2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 14L, 15L, 16L, 16L, 15L,#
   16L, 17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 11L, 12L,#
   11L, 12L, 10L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 2L, 2L, 3L,#
   2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L,#
   5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L,#
   9L, 10L, 11L, 10L, 10L, 11L, 12L, 11L, 12L, 12L, 13L, 14L,#
   12L, 13L, 14L, 15L, 16L, 15L, 14L, 15L, 16L, 16L, 15L, 16L,#
   17L, 16L, 17L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L,#
   2L, 2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L,#
   8L, 8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L, 2L, 2L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 2L,#
   2L, 3L, 4L, 5L, 3L, 4L, 5L, 5L, 6L, 6L, 7L, 5L, 6L, 7L, 8L,#
   8L, 9L, 8L, 8L, 9L, 9L, 8L, 9L, 10L, 11L, 10L, 10L, 11L,#
   12L, 11L, 12L, 12L, 13L, 14L, 12L, 13L, 14L, 15L, 16L, 15L,#
   14L, 15L, 16L, 16L, 15L, 16L, 17L, 16L, 17L, 16L, 17L, 18L,#
   19L, 17L, 18L)), .Names = c("SampleDate", "PondName", "Muestreo",#
"BodyWeight.g.", "Length.mm."), class = "data.frame", row.names = c("1",#
"2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13",#
"14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24",#
"25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35",#
"36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46",#
"47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57",#
"58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68",#
"69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79",#
"80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90",#
"91", "92", "93", "94", "95", "96", "97", "98", "99", "100",#
"101", "102", "103", "104", "105", "106", "107", "108", "109",#
"110", "111", "112", "113", "114", "115", "116", "117", "118",#
"119", "120", "121", "122", "123", "124", "125", "126", "127",#
"128", "129", "130", "131", "132", "133", "134", "135", "136",#
"137", "138", "139", "140", "141", "142", "143", "144", "145",#
"146", "147", "148", "149", "150", "151", "152", "153", "154",#
"155", "156", "157", "158", "159", "160", "161", "162", "163",#
"164", "165", "166", "167", "168", "169", "170", "171", "172",#
"173", "174", "175", "176", "177", "178", "179", "180", "181",#
"182", "183", "184", "185", "186", "187", "188", "189", "190",#
"191", "192", "193", "194", "195", "196", "197", "198", "199",#
"200", "201", "202", "203", "204", "205", "206", "207", "208",#
"209", "210", "211", "212", "213", "214", "215", "216", "217",#
"218", "219", "220", "221", "222", "223", "224", "225", "226",#
"227", "228", "229", "230", "231", "232", "233", "234", "235",#
"236", "237", "238", "239", "240", "241", "242", "243", "244",#
"245", "246", "247", "248", "249", "250", "251", "252", "253",#
"254", "255", "256", "257", "258", "259", "260", "261", "262",#
"263", "264", "265", "266", "267", "268", "269", "270", "271",#
"272", "273", "274", "275", "276", "277", "278", "279", "280",#
"281", "282", "283", "284", "285", "286", "287", "288", "289",#
"290", "291", "292", "293", "294", "295", "296", "297", "298",#
"299", "300", "301", "302", "303", "304", "305", "306", "307",#
"308", "309", "310", "311", "312", "313", "314", "315", "316",#
"317", "318", "319", "320", "321", "322", "323", "324", "325",#
"326", "327", "328", "329", "330", "331", "332", "333", "334",#
"335", "336", "337", "338", "339", "340", "341", "342", "343",#
"344", "345", "346", "347", "348", "349", "350", "351", "352",#
"353", "354", "355", "356", "357", "358", "359", "360", "361",#
"362", "363", "364", "365", "366", "367", "368", "369", "370",#
"371", "372", "373", "374", "375", "376", "377", "378", "379",#
"380", "381", "382", "383", "384", "385", "386", "387", "388",#
"389", "390", "391", "392", "393", "394", "395", "396", "397",#
"398", "399", "400", "401", "402", "403", "404", "405", "406",#
"407", "408", "409", "410", "411", "412", "413", "414", "415",#
"416", "417", "418", "419", "420", "421", "422", "423", "424",#
"425", "426", "427", "428"))
)
library(ggplot2)#
fishplot <-  qplot(PondName,BodyWeight.g.,data=fish_ByMuestreo,colour=Muestreo,position="jitter") +#
 stat_summary(aes(group=Muestreo),fun.data="mean_cl_normal",colour="green",geom="smooth",fill=NA) +#
opts(title="Average weight(grs) by Pond")#
print(fishplot)
library(ggplot2)#
fishplot <-  qplot(PondName,BodyWeight.g.,data=fish_ByMuestreo,colour=Muestreo,position="jitter")#
print(fishplot)
library(ggplot2)#
fishplot <-  qplot(PondName,BodyWeight.g.,data=fish_ByMuestreo,colour=Muestreo,position="jitter")
(1:2 + 1:10) == (rep(1:2,length=10) + 1:10)
all.equal(1:2 + 1:10 , rep(1:2,length=10) + 1:10)
