factorize(d)
str(factorize(d))
str(factorize(d,"x"))
str(factorize(d,"y"))
x<- seq(0,1,1/10)#
y  <- seq(0,1,1/10)#
#
gridd <- expand.grid(x,y )#
#
#
gridd[which(  gridd[,2]=="0.6" ),] #
gridd[which(  gridd[,2]==0.6 ) ,]  #
#
gridd[which(  gridd[,2]=="0.4" ),] #
gridd[which(  gridd[,2]==0.4 ),]  #
#
gridd[which(  gridd[,2]=="0.0" ),] #
gridd[which(  gridd[,2]==0.0 ),]
str(gridd)
gridd[gridd[,1]==0.2]
x<- seq(0,1,1/10)#
y  <- seq(0,1,1/10)#
#
gridd <- expand.grid(x=x,y=y )#
#
#
gridd[which(  gridd[,2]=="0.6" ),] #
gridd[which(  gridd[,2]==0.6 ) ,]  #
#
gridd[which(  gridd[,2]=="0.4" ),] #
gridd[which(  gridd[,2]==0.4 ),]  #
#
gridd[which(  gridd[,2]=="0.0" ),] #
gridd[which(  gridd[,2]==0.0 ),]
subset(gridd, is.equal(x,0.2))
subset(gridd, all.equal(x,0.2))
all.equal(gridd$x,0.2)
gridd$x
all.equal(0.2,gridd$x)
subset(gridd, x == 0.2)
gridd
subset(gridd, x == "0.6")
subset(gridd, x == 0.6)
all.equal(0.6,gridd$x)
all.equal(gridd$x,0.6)
sapply(gridd$x,all.equal,0.6)
subset(gridd,sapply(gridd$x,all.equal,0.6))
?all.equal
subset(gridd,isTRUE(sapply(gridd$x,all.equal,0.6)))
isTRUE(sapply(gridd$x,all.equal,0.6))
subset(gridd, factor(x) == "0.6")
?"=="
?grid.ls
#
#
#
sampleGTree <- gTree(name="parent",#
                     children=gList(grob(name="child", vp="vp1::vp2")),#
                     childrenvp=vpTree(parent=viewport(name="vp1"),#
                                       children=vpList(viewport(name="vp2"))))#
grid.ls(sampleGTree)#
#
grid.ls(sampleGTree, view=TRUE)
#
str(grid.ls(sampleGTree, view=TRUE, print=FALSE))
#
str(grid.ls(sampleGTree, view=TRUE, print=T))
  pushViewport(viewport(height = unit(80, "mm")))    #
  grid.rect()#
  grid.text("I want this viewport to be the whole output size")#
  popViewport()
panel.number
clr
#
pushViewport(viewport(height=unit(.8, "npc")))#
	grid.rect(gp=gpar(col=NULL, fill="green"))#
popViewport()
#
pushViewport(viewport(height=unit(.8, "npc")))#
	grid.rect(gp=gpar(col=NA, fill="green"))#
popViewport()
?gpar
#
grid.show.viewport(viewport(x=0.6, y=0.6,#
                   w=unit(1, "inches"), h=unit(1, "inches")))
library(brew)
?brew
#
brew(system.file("featurefull.brew",package="brew"),envir=new.env())
?par
pdf()
par(bg="transparent")
system("open Rplot.pdf")
system("open Rplots.pdf")
png()
dev.off()
system("open *.png")
par(bg=NA)
#
cars <- c(1, 3, 6, 4, 9)#
trucks <- c(2, 5, 4, 5, 12)#
year <- c(2004, 2005, 2006, 2007, 2008)#
df2<-data.frame(cars,trucks,year)#
xyplot(cars+trucks~year, data=df2, type="o")
qplot(year,)
d<- melt(df2,id="year")
qplot(year,value,melt(df2,id="year"),colour=variable)
qplot(year,value,data=melt(df2,id="year"),colour=variable)
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point"))
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point")) + geom_text()
qplot(year,value,data=melt(df2,id="year"),colour=variable,geom=c("line","point")) + geom_text(aes(label=value))
d <- melt(df2,id="year")#
qplot(year,value,data=d,colour=variable,geom=c("line","point")) + #
geom_text(data= subset(d, variable == "cars"),aes(label=value))
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,...){#
	panel.xyplot(x,y,...)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,...);print(subscripts)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);print(subscripts)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
df2
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts < 5)#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts < 5){#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);if(subscripts <= 5){#
	grid.text(unit(x,"native"),unit(y,"native"),label=y, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...);#
	grid.text(unit(df2$year,"native"),unit(df2$cars,"native"),label=df2$cars, just="top")}}#
  )
xyplot(cars+trucks~year, data=df2, type="o",#
panel=function(x,y,subscripts,...){#
	panel.xyplot(x,y,subscripts=subscripts,...)#
	grid.text(unit(df2$year,"native"),unit(df2$cars,"native"),label=df2$cars, just="top")}#
  )
?panel.superpose
integrate
plot(1,1)
#
p1 <- runif(1000) #
qp1 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="A",xlab="",ylab="")#
qp2 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="B",xlab="",ylab="")#
qp3 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="C",xlab="",ylab="")#
qp4 <- qqmath(~ -log(p1), data = as.data.frame(p1), distribution =#
qexp,main="D",xlab="",ylab="")#
#
trellis.par.set(list(layout.heights = list(top.padding =#
0,main.key.padding=0,key.axis.padding=0,#
                                         axis.xlab.padding=0,#
xlab.key.padding=0,key.sub.padding=0,bottom.padding=0),#
                    layout.widths =#
list(left.padding=0,key.ylab.padding=0,ylab.axis.padding=0,axis.key.padding=0,right.padding=0)))#
plot(qp1, split = c(1, 1, 2, 2), more = TRUE)#
plot(qp2, split = c(1, 2, 2, 2), more = TRUE)#
plot(qp3, split = c(2, 1, 2, 2), more = TRUE)#
plot(qp4, split = c(2, 2, 2, 2), more = FALSE)
units
units()
?units
?unit
unit(12,"pint",12)
valid.units
Grid:::valid.units
unit
valid.unit
?valid.unit
Grid::valid.unit
Grid:valid.unit
getAnywhere(valid.unit)
getAnywhere(valid.units)
x <- seq(1000,5000,by=100)
x
y <- c(1200, 2000, 3000)
match(x,y)
match(x,y[1])
xx <- sample(x,100)
xx <- sample(x,100,replace=T)
xx
match(xx,y[1])
length(match(xx,y[1]))
sum(match(xx,y[1]))
?match
!is.na(match(xx,y[1]))
sum(!is.na(match(xx,y[1])))
sapply(y, function(.v) sum(!is.na(match(xx,.v))))
xx[xx==3000]
    source("http://bioconductor.org/biocLite.R")#
    biocLite("weaver")
ls(package:ggplot2)
floor_time
round_any
?floor_time
?abind
library(spectroR)
library(baptMisc)
?findMinima
?findZeros
findZeros
#
        x <- seq(1, 15, length=100)#
        y <- jitter(sin(x), a=0.2)#
#
        plot(x, y)#
        #
        findZero(x, y) #
        #
        spl <- smooth.spline(x, y)#
        findZero(spl=spl, int=range(x)) #
        #
        zeros <- findZeros(x, y, c(6, 10))#
        abline(v=zeros, col="red")#
        abline(h=0, col="grey90")
zeros
?polyroot
polynom(c(1,1))
?poly
poly(1:10, 3)
polynomial
?root
?uniroot
library(spectra)
plot(1:1)
install.packages(c("ggplot2", "plyr"))
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.5))
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.5),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.7),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.2),pch=19)
f<-  data.frame("x"=c(1,3,5,6,1),"y"=c(1,2,3,4,1))#
plot(f,col=alpha("grey",0.8),pch=19)
 sunflowerplot(f)
#
shadowtext <- function(x, y=NULL, labels, col='white', bg='black',#
	theta= seq(pi/4, 2*pi, length.out=8), r=0.1, ... ) {#
	#
	xy <- xy.coords(x,y)#
	xo <- r*strwidth('A')#
	yo <- r*strheight('A')#
#
	for (i in theta) {#
		text( xy$x + cos(i)*xo, xy$y + sin(i)*yo, labels, col=bg, ... )#
	}#
	text(xy$x, xy$y, labels, col=col, ... )#
}#
#
And here is an example of use:#
#
plot(1:10, 1:10, bg='aliceblue')#
rect(3,3,5,8, col='navy')#
text(5,6, 'Test 1', col='lightsteelblue')#
shadowtext(5,4, 'Test 2', col='lightsteelblue')
sprintf("4.f",2)
sprintf("%4.d",2)
sprintf("%4.s",2)
sprintf("%4.e",2)
sprintf("%4.f",2)
?sprintf
sprintf("%4.f0",2)
sprintf("%04.f",2)
sprintf("%04.f",1000)
sapply(sample(1:1000,4), function(ii) sprintf("%04.f",ii))
install.packages("hwriter")
#
library(hwriter)#
lcss = 'http://www.ebi.ac.uk/~gpau/hwriter/hwriter.css'#
lj = 'http://www.kryogenix.org/code/browser/sorttable/sorttable.js'#
p = openPage('test.html', link.css=lcss, link.javascript=lj)#
hwrite(iris, p, table.class='sortable', row.bgcolor='#
closePage(p)#
browseURL('test.html')
#
library(hwriter)#
lcss = 'http://www.ebi.ac.uk/~gpau/hwriter/hwriter.css'#
lj = 'http://www.kryogenix.org/code/browser/sorttable/sorttable.js'#
p = openPage('test.html', link.css=lcss, link.javascript=lj)#
hwrite(iris, p, table.class='sortable', row.bgcolor=')#
closePage(p)#
browseURL('test.html')
lcss
hwrite(iris, p, table.class='sortable', row.bgcolor='
closePage(p)
browseURL('test.html')
expr <- "3*5"
eval(expr)
eval(deparse(expr))
eval(noquote(expr))
noquote(expr)
as.call(expr)
eval(eval(noquote(expr)))
call(expr)
as.call(noquote(expr))
as.call(list(expr))
?call
eval(as.expression(expr))
as.expression(expr)
as.expression(noquote(expr))
#
system("wget http://dl.getdropbox.com/u/1047321/x.csv")#
x = read.csv("x.csv")#
#
ggplot(x) + geom_path(aes(x=x,y=y), arrow=arrow())#
ggplot(x) + geom_path(aes(x=x,y=y), arrow=arrow(length=unit(3,"inch")))#
#
#
per step#
ggplot(x) + geom_path(aes(x=x,y=y, colour=X), arrow=arrow())#
#
#
#
grouping so split the path in its sub units. But of course, splitting#
it in units of one point does not work:#
ggplot(x) + geom_path(aes(x=x,y=y, group=X), arrow=arrow())#
#
each group#
y = x[-1,]#
y$X = y$X-1#
x = rbind(x,y)#
ggplot(x) + geom_path(aes(x=x,y=y, group=X), arrow=arrow())
d <- read.table(pipe("pbpaste"), head=T)
ddply(d,)
ddply(d,.(Firm),count)
ddply(d,.(Firm),add)
ddply(d,.(Firm),`+`)
ddply(d,.(Firm),summary)
ddply(d,.(Firm))
ddply(d,.(Firm),sum)
aggregate(d$Banks,d$Firm)
#
ddply(d, .(Firm), transform, count = nrow)
#
ddply(d, .(Firm), transform, count = length)
d
#
ddply(d, .(Banks), transform, count = length)
#
ddply(d, .(Firm, Banks), transform, count = length)
#
ddply(table(d), .(Firm), transform, count = length)
table(d)
#
cast(table(d), Firm~.)
#
cast(table(d), .~Firm)
str(table(d))
#
cast(as.data.frame(table(d)), .~Firm)
#
cast(as.data.frame(table(d)), .~Firm, fun=sum)
#
myplot(tmp, tcl = -0.1)
#
myplot(tmp, tcl=-0.1)
plot.formula
getS4Methods("plot")
getMethods("plot")
getMethod("plot")
getS3Method("plot")
Methods("plot")
plot
?plot
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot.formula(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = 0.1)
#
tmp <- data.frame(Y = sample(1:10, 40, replace = TRUE),#
                 X = sample(1:10, 40, replace = TRUE))#
#
myplot <- function(x, ...) {#
 plot(Y ~ X, data = x, ...)#
}#
#
myplot(tmp) #
myplot(tmp, tcl = -0.1)
plot(Y ~ X, data = tmp, tcl = -0.1)
plot(Y ~ X, data = tmp, tcl = -1)
#
legend(80,1150, c("Simulation", "Observation", lty=1:2, col=2:3)
#
legend(1,1, c("Simulation", "Observation", lty=1:2, col=2:3)
#
legend(1,4, c("Simulation", "Observation", lty=1:2, col=2:3)
)
#
legend(1,4, c("Simulation", "Observation"), lty=1:2, col=2:3)
install.packages( "RSiteSearch")
library( "RSiteSearch")
? "RSiteSearch"
RSiteSearch
help(package:RSiteSearch)
help(package=RSiteSearch)
?RSiteSearch.function
#
  z <- RSiteSearch.function("spline", maxPages = 2)#
  str(z)
z
#
#
myData <- read.table(textConnection("treat raw group beta lower upper#
A 0.00176 High 1.09 -0.47 2.64#
A 0.00176 Low -2.70 -4.70 -0.70#
B 0.000636 High  0.70 -0.18 1.59#
B 0.000636 Low -1.67 -2.72 -0.63#
C 0.000501 High -1.42 -2.6 -0.24#
C 0.000501 Low 2.09 0.46 3.73#
D 0.000801 High -1.11 -2.29 0.05#
D 0.000801 Low 2.27 0.64 3.92#
E 0.000419 High -1.05 -2.24 0.12#
E 0.000419 Low 2.54 0.89 4.19#
"),header=TRUE)#
closeAllConnections()#
#
myData$lograw <- log10(myData$raw)#
p <- ggplot(myData,aes(x=lograw,y=beta,colour=group,min=lower,max=upper))#
p <- p + geom_pointrange(size=.7)#
p  <- p + scale_x_continuous(breaks=myData$lograw) + coord_flip()
#
#
myData <- read.table(textConnection("treat raw group beta lower upper#
A 0.00176 High 1.09 -0.47 2.64#
A 0.00176 Low -2.70 -4.70 -0.70#
B 0.000636 High  0.70 -0.18 1.59#
B 0.000636 Low -1.67 -2.72 -0.63#
C 0.000501 High -1.42 -2.6 -0.24#
C 0.000501 Low 2.09 0.46 3.73#
D 0.000801 High -1.11 -2.29 0.05#
D 0.000801 Low 2.27 0.64 3.92#
E 0.000419 High -1.05 -2.24 0.12#
E 0.000419 Low 2.54 0.89 4.19#
"),header=TRUE)#
closeAllConnections()#
#
myData$lograw <- log10(myData$raw)#
p <- ggplot(myData,aes(x=lograw,y=beta,colour=group,min=lower,max=upper))#
p <- p + geom_pointrange(size=.7)#
p  <- p + scale_x_continuous(breaks=myData$lograw) + coord_flip()+theme_bw()
p
sqrt(21.5^2+14.5^2)
c(11.4,7.2,7.5,1.79.4)*2.2
c(11.4,7.2,7.5,1.7,9.4)*2.2
plot(1)
locator(1)
?legend
library(ggplot2)#
x <- seq(1992, 2002, by=2)#
#
d1 <- data.frame(x=x, y=rnorm(length(x)))#
xy <- expand.grid(x=x, y=x)#
d2 <- data.frame(x=xy$x, y=xy$y, z= jitter(xy$x + xy$y))#
#
d1$panel <- "a"#
d2$panel <- "b"#
d1$z <- d1$x#
#
d <- rbind(d1, d2)#
#
p <- ggplot(data = d, mapping = aes(x = x, y = y))#
p <- p + facet_grid(panel~., scale="free")#
p <- p + layer(data= d1,  geom = c( "line"), stat = "identity")#
p <- p + layer(data=d2, mapping=aes(colour=z, fill=z),  geom =#
c("tile"), stat = "identity")#
p
#
        dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
        d <- ggplot(dsmall, aes(carat, price))#
        str(dsmall)#
        library(ggplotpp)#
#
        d + geom_ngon(aes(fill = carat, sides=color), colour="orange",ar=1,  size=5, angle=pi/3)#
#
        d + geom_ngon(aes(colour = carat, angle = x, ar=y),fill=NA,  sides=50)#
        #
        d + geom_ngon(aes(colour = carat, fill = x, size=y), linewidth=2,  sides=6)
 d + geom_ngon(aes(colour = carat, angle = x, ar=y),fill=NA,  sides=50)
 d + geom_ngon(aes(fill = carat, sides=color), colour="orange",ar=1,  size=5, angle=pi/3)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_ngon(aes(ar=table), size=2,  sides=50)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_star(aes(ar=table), size=2,  sides=50)
#
	library(ggplotpp)#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	str(dsmall)#
	d <- ggplot(dsmall, aes(carat, price))+theme_minimal()#
#
	d + geom_ngon(aes(ar=price), size=2,  sides=50) #
	d + geom_star(aes(ar=table), size=2,  sides=5)
checkOneSymbol <- function(pch=0){#
   gTree(children=gList(#
       rectGrob(0.5, 0.5, width=unit(10, "mm"), height=unit(10,  #
"mm"),#
               gp=gpar(lty=2, fill=NA, col=alpha("black", 0.5))),#
   pointsGrob(0.5, 0.5, size=unit(10, "mm"),pch=pch,#
       gp=gpar(col=alpha("red", 0.5)))#
   ))#
#
}#
all.symbols <- lapply(0:23, checkOneSymbol)#
#
pdf("symbols.pdf", height=1.2/2.54, width=24.2/2.54)#
#
vp <- viewport(width=0.5, height=0.5, name="main")#
pushViewport(vp)#
#
pushViewport(viewport(layout=grid.layout(1, 24,#
                       widths=unit(10, "mm"),#
                       heights=unit(10, "mm"),#
                       just="center")))#
#
for(ii in 0:23){#
pushViewport(viewport(layout.pos.col=ii+1, layout.pos.row=1))#
grid.draw(all.symbols[[ii+1]])#
upViewport(1)#
}#
dev.off()
system("open symbols.pdf")
    #
	library(ggplotpp)#
	xy <- expand.grid(x=-10:10, y=-10:10)#
	d1 <- data.frame(x=xy$x, y=xy$y)#
	d1$colour <- sample(1:5, length(xy$x), repl=T) #
	#
	d1$angle <- 2*pi*rnorm(d1$x) #
	d1$whatever <- rnorm(d1$x) #
	d1$length <- abs(rnorm(d1$y))/10 #
	#
	#
	p <- ggplot(data=d1, map=aes(x=x, y=y, angle=angle, length=length, colour=colour))#
	#
	p2 <- #
	p + geom_field() + geom_point()#
	p + geom_field(aes(size=whatever))
geom_field
geom_ellipse
#
	dsmall <- diamonds[sample(nrow(diamonds), 100), ]#
	d <- ggplot(dsmall, aes(carat, price))#
	str(dsmall)#
	library(ggplotpp)
?ggplotpp
library(ggplotpp)
ls(package:ggplotpp)
install.packages("ggplotpp", repos="http://R-Forge.R-project.org")
?pch
#
#
#
#
#
TestChars <- function(sign=1, font=1, ...)#
{#
   if(font == 5) { sign <- 1; r <- c(32:126, 160:254)#
   } else if (l10n_info()$MBCS) r <- 32:126 else r <- 32:255#
   if (sign == -1) r <- c(32:126, 160:255)#
   par(pty="s")#
   plot(c(-1,16), c(-1,16), type="n", xlab="", ylab="",#
        xaxs="i", yaxs="i")#
   grid(17, 17, lty=1)#
   for(i in r) try(points(i%%16, i%/%16, pch=sign*i, font=font,...))#
}#
TestChars()
library(grid)#
library(RGraphics)#
#
#
#
#
boxSize <- .5#
#
calcLayout <- function() {#
    #
    width <- convertWidth(unit(1, "npc"), "inches", valueOnly=TRUE)#
    height <- convertHeight(unit(1, "npc"), "inches", valueOnly=TRUE)#
    aspect <- log(height/width)#
    if (aspect > (log(4) + log(1.5))/2)#
        layout <- 1 #
    else if (aspect >  (log(1.5) + log(1))/2)#
        layout <- 2 #
    else if (aspect > (log(1) + log(2/3))/2)#
        layout <- 3 #
    else if (aspect > (log(2/3) + log(.25))/2)#
        layout <- 4 #
    else#
        layout <- 5 #
    layout#
}#
#
layoutRows <- function(layout) {#
    switch(layout, 4, 3, 2, 2, 1)#
}#
#
layoutCols <- function(layout) {#
    switch(layout, 1, 2, 2, 3, 4)#
}#
#
layoutRow <- function(layout, i) {#
    switch(layout,#
           switch(i, 1, 2, 3, 4),#
           switch(i, 1, 2, 3, 3),#
           switch(i, 1, 2, 2, 1),#
           switch(i, 1, 2, 2, 2),#
           switch(i, 1, 1, 1, 1))#
}#
#
layoutCol <- function(layout, i) {#
    switch(layout,#
           switch(i, 1, 1, 1, 1),#
           switch(i, 1, 1, 1, 2),#
           switch(i, 1, 1, 2, 2),#
           switch(i, 1, 1, 2, 3),#
           switch(i, 1, 2, 3, 4))#
}#
#
lineX <- function(layout, i, rr) {#
    switch(layout,#
           switch(i, c(.5, .5), c(.5, .5), c(.5, .5)),#
           switch(i, c(.5, .5), c(.5, .5),#
                  c(.5 + boxSize/2, 1.5 - boxSize/2)),#
           switch(i, c(.5, .5), #
                  c(.5 + boxSize/2, 1.5 - boxSize/2),#
                  c(.5, .5)),#
           switch(i, c(.5, .5), #
                  c(.5 + boxSize/2, 1.5 - boxSize/2),#
                  c(.5 + boxSize/2, 1.5 - boxSize/2)),#
           switch(i, c(.5 + boxSize/2, 1.5 - boxSize/2),#
                  c(.5 + boxSize/2, 1.5 - boxSize/2),#
                  c(.5 + boxSize/2, 1.5 - boxSize/2)))#
}#
#
lineY <- function(layout, i, rr) {#
    switch(layout,#
           switch(i, c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5 - boxSize/2, -.5 + boxSize/2)),#
           switch(i, c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5, .5)),#
           switch(i, c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5, .5),#
                  c(.5 + boxSize/2, 1.5 - boxSize/2)),#
           switch(i, c(.5 - boxSize/2, -.5 + boxSize/2),#
                  c(.5, .5),#
                  c(.5, .5)),#
           switch(i, c(.5, .5),#
                  c(.5, .5),#
                  c(.5, .5)))#
}#
#
dynamicGrob <- function() {#
    grob(cl="dynamic")#
}#
#
grid.dynamic <- function() {#
    grid.draw(dynamicGrob())#
}#
#
drawDetails.dynamic <- function(x, recording) {#
    layout <- calcLayout()#
    pushViewport(viewport(layout=grid.layout(layoutRows(layout),#
                            layoutCols(layout),#
                            respect=TRUE)))#
    for (i in 1:4) {#
        pushViewport(viewport(layout.pos.col=layoutCol(layout, i),#
                              layout.pos.row=layoutRow(layout, i)))#
        rr <- roundRect(width=boxSize, height=boxSize,#
                        name=paste("rr", i, sep=""),#
                        gp=gpar(fill="black"))#
        grid.draw(rr)#
        grid.text(i, gp=gpar(col="white",#
                       fontsize=convertHeight(unit(0.3, "npc"),#
                         "points", valueOnly=TRUE)))#
        if (i < 4)#
            grid.lines(lineX(layout, i, rr), lineY(layout, i, rr),#
                       arrow=arrow(length=unit(0.1, "npc")),#
                       gp=gpar(lwd=convertHeight(unit(0.01, "npc"),#
                                 "points", valueOnly=TRUE)*5*72/96))#
        popViewport()#
    }#
    popViewport()#
}
library(ggextra)
?ggextra
#
#
#
        mdf <- data.frame(x <- seq(0, 10), y=rnorm(x), #
                f=factor(rep(letters[1:2], each=3, length=length(x))))#
#
        a <- qplot(x, y, data=mdf, colour=f, geom=c("line", "point"), facets=f~.) +#
         theme_grey() +  opts(title="theme_grey")#
#
        b <- a + theme_talk() + opts(title="theme_talk")#
        c <- a + theme_minimal() + opts(title="theme_minimal")#
        d <- a + theme_bw() + opts(title="theme_bw")#
        e <- a + theme_flashy() + opts(title="theme_flashy")#
        f <- a + theme_bb() + opts(title="theme_dark")#
#
        arrange(a,b,c,d, e, f)
#
        d <- diamonds[sample(nrow(diamonds), 100), ]#
        p <- ggplot(d, aes(carat, price, colour=cut)) #
        str(d)#
        #
#
        #
        p1 <-#
        p + geom_ngon(map=aes(sides=cut, fill=cut), size=2)+opts(title="plot1")#
        p2 <- #
        p + geom_point()+ geom_field(map=aes(length=carat/10, angle=cut))+opts(title="plot2")#
        p3 <- #
        p + geom_ellipse(map=aes(ar=depth, angle=table, fill=cut))+opts(title="plot3")#
        require(dichromat)#
        p4 <- #
        p + geom_star(map=aes(edges=cut, size=carat))+opts(title="plot5")+#
        scale_colour_dichromat(type="div", palette=8)#
#
        arrange(p1, p2, p3, p4)
setwd('/Users/baptiste/Documents/R/photonics/ggplot-add-ons/pkg/ggextra/demos/examples')
arrange
